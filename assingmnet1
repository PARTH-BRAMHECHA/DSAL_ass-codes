/*
WAP to accept student database using class and array of structure.Implement searching algorithms like binary,linear and sorting algorithms like insertion,quick,bubble,selection
This is the first assingment the prequisities are knowing Classes,object,structure and various sorting and searching techniques
*/
//preprocessor statements
#include<iostream>
#include<string>
#include<cstring>
#include<string.h>
using namespace std;

//declaration of structure student
struct student{
int rollno;
string name;
double SGPA;
};

//declaration of class se9
class se9{
private: student s[25];
         int n;
public:void Accept(int);
       void Display(int);  
       void rDisplay(int);
       void ls();
       void bs();
       void dis_bsresult(int);
       void in_sort();
       int Qpart(int,int);   
       int qSort(int,int) ;                                                                          
};

//function to perforn linear search
void se9::ls(){
    double key;
    cout<<"Enter sgpa to be searched"<<endl;
    cin>>key;
    int flag=0;
    int i;
    for(i=0;i<n;i++){
        if(key == s[i].SGPA){
            if(flag==0)
               cout<<"The match is :"<<endl<<"Roll number"<<"\t"<< "Name"<<"\t \t"<< "SGPA"<<endl;
            cout<<s[i].rollno<<"\t\t"<<s[i].name<<"\t\t"<<s[i].SGPA<<endl;
            flag++;
        }
    }        

    if(flag==0)
        cout<<"No match found!"<<endl;
}

//function to perform binary search
void se9::bs()
{
    string name;
    cout<<"Enter the name to to be searched"<<endl;
    cin>>name;
    int low_lmt=0,upp_lmt=n-1,middle=(low_lmt+upp_lmt)/2;
    
    while(low_lmt<=upp_lmt){
        
        if(s[middle].name==name){
        cout<<"The match is :"<<endl;
        cout<<"Roll number"<<"\t"<< "Name"<<"\t \t"<< "SGPA"<<endl;
        cout<<s[middle].rollno<<"\t\t"<<s[middle].name<<"\t\t"<<s[middle].SGPA<<endl;
            break;
        }
        
        else if(s[middle].name<name)
            low_lmt=middle+1;
        
        else if(s[middle].name>name)
            upp_lmt=middle-1;
        
        if(low_lmt>upp_lmt)
        {
            cout<<name<<" Not found in the list"<<endl;
        }
        middle=(low_lmt+upp_lmt)/2;    
    }
}

//function declared in class se-9 used to take inputs from the user,type:public
void se9::Accept(int no) {
  n=no;
  se9 S1;
  for(int i=0;i<n;i++)
  {
     //roll numbner must be a unquie entry and positive
     while(1){
         int rn;
         cout<<"Please enter the roll number"<<endl;
         cin>>rn;
         
         int flag=0;
         if(rn>0)
            flag=1;
         for(int j=0;j<i;j++)
         {
             if(s[j].rollno==rn){
                flag=0;
                 break;  
              }
         }
         if(flag){
            s[i].rollno=rn;
            break;
         }
         else{
             cout<<"Wrong input the rollnumber must be unique and non negative"<<endl;
         }
     }
 
     string name;
     cout<<"Please enter the Name"<<endl;
     cin>>name;
     s[i].name=name;
     
     //must be less than 10
     while(1){
         double SGPA;
         cout<<"Please enter the SGPA"<<endl;
         cin>> SGPA;
         if(SGPA<=10.0){
            s[i].SGPA=SGPA;
            break;
         }
         else
         cout<<"Wrong input SGPA is less than 10"<<endl;
         
     }
     
  }
   
}

//function declared in class se-9 used to show output to the user,type:public
void se9::Display(int lim){
    cout<<endl<<"Roll number"<<"\t"<< "Name"<<"\t\t"<< "SGPA"<<endl;
    for(int i=0;i<lim;i++)
    cout<<s[i].rollno<<"\t\t"<<s[i].name<<"\t\t"<<s[i].SGPA<<endl;
}

//function declared in class se-9 used to show output to the user in reverse order,type:public
void se9::rDisplay(int lim){
    cout<<"Roll number"<<"\t"<< "Name"<<"\t\t"<< "SGPA"<<endl;
    for(int i=lim-1;i>=0;i--)
    cout<<s[i].rollno<<"\t\t"<<s[i].name<<"\t\t"<<s[i].SGPA<<endl;
}

//function declared in class se-9 used to insertion t the given array according to name
void se9:: in_sort(){
    for(int i=1;i<n;i++)
    {
        int cur_rono=s[i].rollno;
        string cur_name=s[i].name;
        double cur_sgpa=s[i].SGPA;
        int j=i-1;
        while(j>=0 && s[j].name>cur_name)
        {
            s[j+1].rollno=s[j].rollno;
            s[j+1].name=s[j].name;
            s[j+1].SGPA=s[j].SGPA;
            j--;
        }
        s[j+1].rollno=cur_rono;
        s[j+1].name=cur_name;
        s[j+1].SGPA=cur_sgpa;
    }
}

//function to perform parition of the array it is a part of se-9 class to access private member s[25]
int se9::Qpart(int start, int end)
{

	int pivot = s[start].SGPA;

	int count = 0;
	for (int i = start + 1; i <= end; i++) {
		if (s[i].SGPA <= pivot)
			count++;
	}

	// Giving pivot element its correct position
	int pivotIndex = start + count;	
	swap(s[pivotIndex].name,s[start].name);
	swap(s[pivotIndex].rollno,s[start].rollno);
	swap(s[pivotIndex].SGPA,s[start].SGPA);

	// Sorting left and right parts of the pivot element
	int i = start, j = end;
    while(i<j)
    {
        while(pivot>=s[i].SGPA && i<end){
            i++;}
        while(pivot<=s[j].SGPA && j>start){
            j--;}
        
		if (i<j) {
				swap(s[i].name,s[j].name);
				swap(s[i].rollno,s[j].rollno);
				swap(s[i].SGPA,s[j].SGPA);
		}
	}

	return pivotIndex;
}

//function to recursively call quicksort
int se9::qSort(int start, int end)
{
	// base case
	if (start >= end)
		return 0;

	// partitioning the array
	int p = Qpart(start, end);

	// Sorting the left part
    qSort(start, p - 1);

	// Sorting the right part
    qSort(p + 1, end);
	
	return 0;
}

int main(){
se9 S;//creating object of class se9

int no;
cout<<"Enter the number of inputs required"<<endl;
cin>>no;

S.Accept(no);//calling function to accept values in array of student
cout<<endl;
for(int i=0;i<10;i++){
    cout<<"-------------";
}
S.Display(no);//caling function to display values in array of student
for(int i=0;i<10;i++){
    cout<<"-------------";
}

int t=1;
while(t){
    int choice;
    cout<<endl;
    cout<<"Enter choice :\n 1 for showing the toppers\n 2 for sorting the array as per the the name \n 3 for searching the name \n 4 for searching according to sgpa"<<endl;
    cin>>choice;
    switch(choice){
        case 1:
            cout<<endl;
            cout<<"The toppers are"<<endl;
            S.qSort(0, no - 1);
            if(no<=10)
            	S.rDisplay(no);
            else
            	S.rDisplay(10);	
            for(int i=0;i<10;i++){
                 cout<<"---------";
            }
            cout<<endl<<"Enter 0 to exit and any other to continue"<<endl;
            cin>>t;
            break;  
            
        case 2:    
            S.in_sort();//caling function to sort according to name
            S.Display(no);
            cout<<endl;
            cout<<"Enter 0 to exit and any other to continue";
            cin>>t;
            break;
            
        case 3:
            cout<<endl;
            S.in_sort();//caling function to sort according to name as for binary search we need sorted array
            S.bs();//calling function to perform binary search on parameter name,it returns position of string in array after binary search
            cout<<endl;
            cout<<"Enter 0 to exit and any other to continue"<<endl;
            cin>>t;
            break;
            
        case 4:
            S.ls();//calling function to perform linear search on parameter SGPA
            cout<<endl;
            cout<<"Enter 0 to exit and any other to continue"<<endl;
            cin>>t;
            break;
            
        default:
            cout<<"wrong input"<<endl;
            cout<<"Enter 0 to exit and any other to continue"<<endl;
            cin>>t;
}
}
}
