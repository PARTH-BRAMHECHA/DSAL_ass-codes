// Circular Queue implementation in C++ fro hospital
#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Patient {
    string name; //string datatype to hold name of patient
    int enrono;//float datatype to hold enrollment number of patient
    double bill;//double datatype to hold bill of the patient
};

class PCQueue {
private:
    vector<Patient> queue;
    int front, rear, size;

public:
    PCQueue(int s) {
        front = -1;
        rear = -1;
        size = s;
        queue.resize(size);
    }
    bool isFull();  //function to check if given ciruclar queue is full
    bool isEmpty(); //function to check if given ciruclar queue is empty
    void enQueue(string,int,double);//function to enqueue in a given ciruclar queue 
    void deQueue();//function to dequeue from a given ciruclar queue  
    void display();//function to display a given ciruclar queue};
};
    // Check if the queue is full
    bool PCQueue ::  isFull() {
        return (front == 0 && rear == size - 1) || ((rear + 1) % size == front);
    }
    
    // Check if the queue is empty
    bool PCQueue :: isEmpty() {
        return front == -1;
    }
    
    // Adding an element
    void PCQueue :: enQueue(string name, int enrono, double bill) {
        if (isFull()) {
            cout << "Queue is full" << endl;
        } else {
            if (front == -1)
                front = 0;
            rear = (rear + 1) % size;
            queue[rear].name = name;
            queue[rear].enrono = enrono;
            queue[rear].bill = bill;
        }
    }

     // Removing an element
    //here we physically are not removing an elemnet but logically discarding it
    void PCQueue :: deQueue() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
        } else {
            if (front == rear) {
                front = -1;
                rear = -1;
            } else {
                front = (front + 1) % size;
            }
        }
    }
    
    //displaying the queue
    void PCQueue :: display() {
        if (isEmpty()) {
            cout << "Empty Queue" << endl;
        } else {
            cout << "Name\t\tEnrollment number\tBill" << endl;
            if (front <= rear) {
                for (int i = front; i <= rear; i++) {
                    cout << queue[i].name << "\t\t" << queue[i].enrono << "\t\t\t" << queue[i].bill << endl;
                }
            } else {
                for (int i = front; i < size; i++) {
                    cout << queue[i].name << "\t\t" << queue[i].enrono << "\t\t\t" << queue[i].bill << endl;
                }
                for (int i = 0; i <= rear; i++) {
                    cout << queue[i].name << "\t\t" << queue[i].enrono << "\t\t\t" << queue[i].bill << endl;
                }
            }
        }
        cout << endl;
    }


int main() {
    int s;
    cout << "Please enter the number of patients the hospital can handle: ";
    cin >> s;

    PCQueue P(s);
    int choice;

    while (true) {
        cout << "Please enter:\n1 for enqueue\n2 for dequeue\n3 for displaying the queue\n4 to exit" << endl;
        cin >> choice;

        switch (choice) {
            case 1: {
                string name;
                int enrono;
                double bill_loc;
                if(P.isFull()){
                    cout<<"The Queue is full"<<endl;
                }
                else{
                    cout << "Enter the name of the patient: ";
                    cin>>name;
    
                    cout << "Enter Enrollment number of the patient: ";
                    cin >> enrono;
    
                    cout << "Enter the bill of the patient: ";
                    cin >> bill_loc;
    
                    P.enQueue(name, enrono, bill_loc);
                    break;
                    }
            }

            case 2:
                P.deQueue();
                break;

            case 3:
                P.display();
                break;

            case 4:
                exit(0);

            default:
                cout << "Invalid choice. Please try again." << endl;
                break;
        }
    }

    return 0;
}
